name: CI/CD Pipeline

env:
    VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
    VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build-backend:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest python-dotenv flask-cors PyJWT
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi 

    - name: Install missing dependencies
      run: |
        pip install Flask-SQLAlchemy SQLAlchemy Flask-Testing

    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=node_modules
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude=node_modules

    - name: Test with unittest
      working-directory: backend 
      env:
        FLASK_ENV: testing
        TEST_DATABASE_URI: sqlite:///:memory
        
      run: |
        python -m unittest discover -s tests -p 'test_*.py'

  deploy-frontend:
    needs: [build-backend]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Vercel CLI
        working-directory: ./frontend 
        run: npm install --global vercel

      - name: Pull Vercel Env Info
        working-directory: ./frontend 
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN_ID }}

      - name: Build Project
        working-directory: ./frontend 
        run: vercel build -- prod --token=${{ secrets.VERCEL_TOKEN_ID }}

      - name: Deploy Project
        working-directory: ./frontend 
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN_ID }}
